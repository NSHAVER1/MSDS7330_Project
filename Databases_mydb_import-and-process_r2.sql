USE mydb;							#use it

DROP TABLE if exists mydb_raw;		#drop if already there

CREATE TABLE mydb_raw (			#create temporary holding table
    EmployeeID varchar(255),
    recorddate_key varchar(255),
	birthdate_key varchar(255),
    orighiredate_key varchar(255),
	terminationdate_key varchar(255),
	age int,
	length_of_service int,
	city_name varchar(255),
	department_name varchar(255),
	job_title varchar(255),
	store_name int,
	gender_short varchar(255),
	gender_full varchar(255),
	termreason_desc varchar(255),
	termtype_desc varchar(255),
	STATUS_YEAR year,
	STATUS varchar(255),
	BUSINESS_UNIT varchar(255)
);

#LOAD DATA LOCAL INFILE 'C:/Users/jkras/Desktop/MFG10YearTerminationData_2.csv'	 #load in
LOAD DATA LOCAL INFILE 'C:/Users/nmsha/Documents/SMU/Databases/Projects/Term Project/Dataset/MFG10YearTerminationData.csv'


INTO TABLE mydb.mydb_raw		#use temporary holding table

FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'		#options

LINES TERMINATED BY '\n'		#termination of lines

IGNORE 1 ROWS;		#ignores CSV headers

DROP TABLE if exists mydb.proc;

CREATE TABLE mydb.proc (		#create new processed table w/ type conversions
    EmployeeID int,
    recorddate_key datetime,
	birthdate_key datetime,
    orighiredate_key datetime,
	terminationdate_key datetime,
	age int,
	length_of_service int,
	city_name varchar(255),
	department_name varchar(255),
	job_title varchar(255),
	store_name int,
	gender_short varchar(255),
	gender_full varchar(255),
	termreason_desc varchar(255),
	termtype_desc varchar(255),
	STATUS_YEAR year,
	STATUS varchar(255),
	BUSINESS_UNIT varchar(255)
);

INSERT INTO mydb.proc (			#put into new processed table
	EmployeeID,
	recorddate_key, 
	birthdate_key, 
    orighiredate_key, 
    terminationdate_key, 
    age,
	length_of_service,
	city_name,
	department_name,
	job_title,
	store_name,
	gender_short,
	gender_full,
	termreason_desc,
	termtype_desc,
	STATUS_YEAR,
	STATUS,
	BUSINESS_UNIT)

SELECT EmployeeID,				#data being input to new processed table
    STR_TO_DATE(recorddate_key, '%c/%e/%Y %k:%i'),
	STR_TO_DATE(birthdate_key, '%c/%e/%Y'),
    STR_TO_DATE(orighiredate_key, '%c/%e/%Y'),
	STR_TO_DATE(terminationdate_key, '%c/%e/%Y'),
	age,
	length_of_service,
	city_name,
	department_name,
	job_title,
	store_name,
	gender_short,
	gender_full,
	termreason_desc,
	termtype_desc,
	STATUS_YEAR,
	STATUS,
	BUSINESS_UNIT FROM mydb_raw as T;
    

DROP TABLE if exists mydb_raw; 	#drop raw holding table

#must alter to drop tables in the right order so don't drop a table with a foreign key first

DROP TABLE IF EXISTS mydb.status; 
DROP TABLE if exists mydb.employee;
DROP TABLE IF EXISTS mydb.location;

CREATE TABLE `location` (								#autogenerated from EER Model
  `Location_ID` int(11) NOT NULL AUTO_INCREMENT,
  `store_name` int(11) DEFAULT NULL,
  `city_name` varchar(255) DEFAULT NULL,
  `BUSINESS_UNIT` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Location_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=131134 DEFAULT CHARSET=utf8;
				
INSERT INTO mydb.location (
				city_name,
				store_name,
				BUSINESS_UNIT)

SELECT DISTINCT city_name,
				store_name,
				BUSINESS_UNIT
				FROM mydb.proc;	


CREATE TABLE `employee` (							#autogenerated from EER Model
  `EmployeeID` int(11) NOT NULL,
  `birthdate_key` date DEFAULT NULL,
  `orighiredate_key` date DEFAULT NULL,
  `terminationdate_key` date DEFAULT NULL,
  `department_name` varchar(255) DEFAULT NULL,
  `job_title` varchar(255) DEFAULT NULL,
  `gender_short` varchar(255) DEFAULT NULL,
  `gender_full` varchar(255) DEFAULT NULL,
  `Location_ID` int(11) DEFAULT NULL,
  PRIMARY KEY (`EmployeeID`),
    CONSTRAINT `Location_ID`
    FOREIGN KEY (`Location_ID`)
    REFERENCES `mydb`.`location` (`Location_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



INSERT INTO mydb.employee (			
	EmployeeID,
	birthdate_key, 
    orighiredate_key, 
    terminationdate_key, 
	department_name,
	job_title,
	gender_short,
	gender_full)

SELECT DISTINCT EmployeeID, 
				birthdate_key, 
				orighiredate_key, 
				terminationdate_key, 
				department_name, 
				job_title,
				gender_short,
				gender_full
				FROM mydb.proc;
  
  


CREATE TABLE `status` (								#autogenerated from EER Model
  `Status_ID` int(11) NOT NULL AUTO_INCREMENT,
  `EmployeeID` int(11) DEFAULT NULL,
  `recorddate_key` datetime DEFAULT NULL,
  `termreason_desc` varchar(255) DEFAULT NULL,
  `termtype_desc` varchar(255) DEFAULT NULL,
  `STATUS_YEAR` int(11) DEFAULT NULL,
  `STATUS` varchar(255) DEFAULT NULL,
  `Age` int(11) DEFAULT NULL,
  `length_of_service` int(11) DEFAULT NULL,
  PRIMARY KEY (`Status_ID`),
  KEY `EmployeeID_idx` (`EmployeeID`),
  CONSTRAINT `fk_EmployeeID` FOREIGN KEY (`EmployeeID`) REFERENCES `employee` (`EmployeeID`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=65536 DEFAULT CHARSET=utf8;


INSERT INTO mydb.status (			
	EmployeeID,
    age,
    length_of_service,
	recorddate_key,
	termreason_desc,
	termtype_desc,	
    STATUS_YEAR, 
    STATUS)

SELECT DISTINCT EmployeeID,
				age,
				length_of_service,
				recorddate_key,
				termreason_desc,
				termtype_desc,
				STATUS_YEAR, 
				STATUS 
				FROM mydb.proc;		



		
			
            
UPDATE  mydb.employee a        			#update employee table
INNER JOIN mydb.proc b        			#join with complete processing table
ON a.EmployeeID = b.employeeID        	#on equivalent EmployeeID values
INNER JOIN mydb.location c        		#inner join result with location table
ON b.store_name = c.store_name        	#on equivalent store_name values in processing table and location table
and b.business_unit = c.business_unit 	#and on equivalent business_unit values in processing table and location table
SET a.location_id = c.location_id;		#setting autoincremented location_id primary key values in location table into employee table
				